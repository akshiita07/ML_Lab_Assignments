# ass1 Q1

# a: REVERSE
# pip install numpy-->if not present--> no module present error
import numpy as np           #create alias as np
arr=np.array([1,2,3,6,4,5])           #create array
revArr=arr[::-1]          #to reverse array
print(revArr)

# b: FLATTEN
# convert 2d array into 1d
array1=np.array([[1,2,3],[2,4,5],[1,2,3]])           #create array
flatRowArr=array1.flatten()           #to flatten array
flatColArr=array1.flatten(order='F')
# COLM WISE
print(flatColArr)
# ROW WISE -->by default
print(flatRowArr)

# c: COMPARE
# use np.equal to compare
arr1=np.array([[1,2],[3,4]])
arr2=np.array([[1,2],[3,4]])
arr3=np.array([[1,3],[2,4]])
comp1=np.equal(arr1,arr2)
comp2=np.equal(arr1,arr3)
print(comp1)
print(comp2)

# d: MOST FREQUENT VALUE & THEIR INDEX:          MODE
x=np.array([1,2,3,4,5,1,2,1,1,1])
y=np.array([1,1,1,2,3,4,2,4,3,3,3])
# use bin count--> creates bins
coutX=np.bincount(x)   #counts occurrences of each x
coutY=np.bincount(y)   #counts occurrences of each y
mostFreqX=np.argmax(coutX)
mostFreqY=np.argmax(coutY)
indexX=np.where(x==mostFreqX)[0]
indexY=np.where(y==mostFreqY)[0]
print(f"Most freq element in x: {mostFreqX} at index {indexX}")
print(f"Most freq element in y: {mostFreqY} at index {indexY}")

# e: sum of all elements, ROW WISE,  COLM WISE
gfg=np.matrix('[4,1,9;12,3,1;4,5,6]')
# sum of all elements
print("Sum of all elements is= ",np.sum(gfg))
# sum of all elements ROW WISE
print("Sum of all elements  ROW WISE is= ",np.sum(gfg,axis=1))   #1 for row
# sum of all elements COLM WISE
print("Sum of all elements COLM WISE is= ",np.sum(gfg,axis=0))  #0 for colm

# f:
n_array=np.array([[55,25,15],[30,44,2],[11,45,77]])
# SUM OF DIAGONAL ELEMENTS
print("Sum of all DIAGONAL elements is= ",np.trace(n_array))
# INVERSE OF MATRIX
print("INVERSE OF MATRIX is= ",np.linalg.inv(n_array))     #linalg--> linear algorithm
# DETERMINANT OF MATRIX
print("DETERMINANT OF MATRIX is= ",np.linalg.det(n_array))

eigenVal,eigenVec=np.linalg.eig(n_array)
# EIGEN VALUES OF MATRIX
print("EIGEN VALUES OF MATRIX is= ",eigenVal)
# EIGEN VECTORS OF MATRIX
print("EIGEN VECTORS OF MATRIX is= ",eigenVec)


# g: MUlTiPLY MATRIX & FIND COVARIANCE
p=[[1,2],[2,3]]
q=[[4,5],[6,7]]
print("MULTIPLICATION OF MATRIX p & q is= ",np.multiply(p,q))
print("covariance OF MATRIX p & q is= ",np.cov(p,q))

# h: find inner & outer cartesian product
m=np.array[[[2,3,4],[3,2,9]]]
n=np.array[[[1,5,0],[5,10,3]]]
print("INNER CARTESIAN PRODUCT OF m,n= ",)
print("OUTER CARTESIAN PRODUCT OF m,n= ",np.dot(m,n))